#!/usr/bin/env bash

# shellcheck disable=SC2034

# fail wait when any children fails
set -m

set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace

# Set magic variables for current file & dir
dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
root="$(cd "$(dirname "${dir}")" && pwd)"
TMP_DIR="$root/tmp"

CHANNEL=$(./scripts/circle/_channel)
VERSION=$(./scripts/_version)

function split_platform () {
  IFS='_' read -ra _circle_job <<< "$CIRCLE_JOB"
  export OS=${OS:-${_circle_job[0]-}}
  export ARCH=${ARCH:-${_circle_job[1]-}}
}

if [[ ! -z "${CIRCLE_JOB-}" ]]; then
  split_platform "$CIRCLE_JOB"
fi

function versioned_base () {
  echo "heroku-cli-v${VERSION}-${OS}-${ARCH}"
}
function unversioned_base () {
  echo "heroku-cli-${OS}-${ARCH}"
}

function platform_dir () {
  echo "$TMP_DIR/${OS}_${ARCH}"
}

function tgz_path () {
  echo "$(platform_dir)/dist/$(unversioned_base).tar.gz"
}
function txz_path () {
  echo "$(platform_dir)/dist/$(unversioned_base).tar.xz"
}

function go_home () {
  cd "${root}"
}
go_home

function bg () {
  "$@" &
  pids="${pids:-} $!"
}

function wait_all () {
  for pid in $pids; do
    wait "${pid}" || exit 1
  done
}

function s3upload () {
  aws s3 cp "$@"
}
# function s3uploadDayCache () {
#   s3upload --cache-control max-age=86400 "$@"
# }
# function s3uploadHourCache () {
#   s3upload --cache-control max-age=3600 "$@"
# }
