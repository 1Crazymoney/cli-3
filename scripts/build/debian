#!/usr/bin/env bash

set +x

echo "$HEROKU_DEB_KEY" | base64 -d | gpg --import

source ./scripts/_init

set -x

export OS=linux

# set constants
workspace_root=$root/tmp/apt

function build_deb () {
  ARCH=$1
  WORKSPACE="$workspace_root/$(versioned_deb_base).apt"
  rm -rf "$WORKSPACE"

  # prep workspace
  mkdir -p "$WORKSPACE/DEBIAN"
  mkdir -p "$WORKSPACE/usr/bin"
  mkdir -p "$WORKSPACE/usr/lib"
  mkdir -p "$dist_deb"

  # setup base
  tar xf "$(txz_path)"
  mv "$(versioned_base)" "$WORKSPACE/usr/lib/heroku"

  # add bin loader scripts
  cat << EOF > "$WORKSPACE/usr/lib/heroku/bin/heroku"
#!/usr/bin/env bash
set -e
get_script_dir () {
  SOURCE="\${BASH_SOURCE[0]}"
  # While \$SOURCE is a symlink, resolve it
  while [ -h "\$SOURCE" ]; do
    DIR="\$( cd -P "\$( dirname "\$SOURCE" )" && pwd )"
    SOURCE="\$( readlink "\$SOURCE" )"
    # If \$SOURCE was a relative symlink (so no "/" as prefix, need to resolve it relative to the symlink base directory
    [[ \$SOURCE != /* ]] && SOURCE="\$DIR/\$SOURCE"
  done
  DIR="\$( cd -P "\$( dirname "\$SOURCE" )" && pwd )"
  echo "\$DIR"
}
DIR=\$(get_script_dir)
CLI_BINPATH=\$DIR/heroku \$DIR/node \$DIR/heroku.js "\$@"
EOF
  chmod +x "$WORKSPACE/usr/lib/heroku/bin/heroku"

  cat << EOF > "$WORKSPACE/usr/lib/heroku/bin/heroku.js"
const path = require('path')
const CLI = require('cli-engine').default
const root = path.join(__dirname, '..')
const cli = new CLI({
  argv: process.argv.slice(1),
  config: {
    root,
    pjson: require(path.join(root, 'package.json')),
    channel: '${CHANNEL}',
    version: '${VERSION}',
    updateDisabled: 'update the CLI with "sudo apt-get upgrade heroku"'
  }
})
cli.run()
EOF

  # add debian config
  sed -e "s/Architecture: ARCHITECTURE/Architecture: $(deb_arch)/" resources/deb/control | \
  sed -e "s/Version: VERSION/Version: $DEB_VERSION/" \
  > "$WORKSPACE/DEBIAN/control"

  # symlink bin
  ln -s ../lib/heroku/bin/heroku "$WORKSPACE/usr/bin/heroku"

  # reset permissions
  chown -R root "$WORKSPACE"
  chgrp -R root "$WORKSPACE"

  # build deb package
  dpkg --build "$WORKSPACE" "$(unversioned_deb_path)"
}

for ARCH in "${DEB_ARCHS[@]}"; do
  bg build_deb "$ARCH"
done
wait_all
