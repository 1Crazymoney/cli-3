#!/bin/bash

set -ex

source ./scripts/main

if [[ $# -lt 2 ]] || [[ $# -gt 3 ]]; then
  echo "USAGE: $0 PLATFORM CHANNEL [DEST]"
  exit 1
fi

PLATFORM=$1
CHANNEL=$2
DEST=${3:-}
SHA=$(git rev-parse --short HEAD)
VERSION=$(node -p "require('./package.json').version")
VERSION="$VERSION-$SHA"
NODE_VERSION=$(node -p "require('./package.json')['cli-engine'].node || process.versions.node")
NAME=$(node -p "require('./package.json').name")
BIN=$(node -p "require('./package.json')['cli-engine'].bin || require('./package.json').name")

IFS='-' read -ra INFO <<< "$PLATFORM"
OS=${INFO[0]}
ARCH=${INFO[1]}

# setup workspace
TARBALL_BASE=$NAME-v$VERSION-$PLATFORM
DEST=${DEST:="${__root}/tmp/build/$TARBALL_BASE"}
rm -rf "$DEST"
mkdir -p "${__root}/tmp/cache"
mkdir -p "$DEST/node_modules"
mkdir -p "$DEST/bin"
if [ -f README.md ]; then cp README.md "$DEST"; fi
if [ -f LICENSE ]; then cp LICENSE "$DEST"; fi
cp package.json "$DEST"

# install packages
cd "$DEST"
DEST=$(pwd)

if [ -d "${__root}/tmp/build/yarn" ]; then
  cp "${__root}/tmp/build/yarn/package.json" "$DEST"
  cp "${__root}/tmp/build/yarn/yarn.lock" "$DEST"
  cp -r "${__root}/tmp/build/yarn/node_modules" "$DEST"
else
  yarn install --no-progress --production
fi

# build cli-engine if needed
if [ ! -f "$DEST/node_modules/cli-engine/lib/cli.js" ]; then
  cd "$DEST/node_modules/cli-engine"
  yarn
  yarn run prepare
fi

# install node
if [ "$OS" == windows ]; then
  NODE_BASE=node-v$NODE_VERSION-win-$ARCH
  if [ ! -f "${__root}/tmp/cache/$NODE_BASE.7z" ]; then
    URL=https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-win-$ARCH.7z
    curl -fSsLo "${__root}/tmp/cache/$NODE_BASE.7z" "$URL"
  fi
  cd "$DEST"
  7z x -bd -y "${__root}/tmp/cache/$NODE_BASE.7z" > /dev/null
  mv "$DEST/$NODE_BASE/node.exe" "$DEST/bin/node.exe"
  rm -rf "${DEST:?}/$NODE_BASE"
else
  if [ "$ARCH" == "arm" ]; then NODE_ARCH=armv7l; else NODE_ARCH="$ARCH"; fi
  NODE_BASE=node-v$NODE_VERSION-$OS-$NODE_ARCH
  if [ ! -f "${__root}/tmp/cache/$NODE_BASE.tar.xz" ]; then
    URL=https://nodejs.org/dist/v$NODE_VERSION/$NODE_BASE.tar.xz
    curl -fSLo "${__root}/tmp/cache/$NODE_BASE.tar.xz" "$URL"
  fi
  tar -C "$DEST" -xf "${__root}/tmp/cache/$NODE_BASE.tar.xz"
  mv "$DEST/$NODE_BASE/bin/node" "$DEST/bin/node"
  rm -rf "${DEST:?}/$NODE_BASE"
fi

# create bin runner
if [ "$OS" == windows ]; then
  cat << EOF > "$DEST/bin/$BIN.cmd"
@echo off
set CLI_BINPATH=%~dp0\\$BIN.cmd
"%~dp0\\node.exe" "%~dp0\\$BIN.js" %*
EOF
else
  cat << EOF > "$DEST/bin/$BIN"
#!/usr/bin/env bash
set -e
get_script_dir () {
  SOURCE="\${BASH_SOURCE[0]}"
  # While \$SOURCE is a symlink, resolve it
  while [ -h "\$SOURCE" ]; do
    DIR="\$( cd -P "\$( dirname "\$SOURCE" )" && pwd )"
    SOURCE="\$( readlink "\$SOURCE" )"
    # If \$SOURCE was a relative symlink (so no "/" as prefix, need to resolve it relative to the symlink base directory
    [[ \$SOURCE != /* ]] && SOURCE="\$DIR/\$SOURCE"
  done
  DIR="\$( cd -P "\$( dirname "\$SOURCE" )" && pwd )"
  echo "\$DIR"
}
DIR=\$(get_script_dir)
# normalize home directory
CLI_HOME=\$(cd && pwd)
XDG_DATA_HOME=\${XDG_DATA_HOME:="\$CLI_HOME/.local/share"}
BIN_DIR="\$XDG_DATA_HOME/$BIN/client/bin"
if [ -x "\$BIN_DIR/$BIN" ] && [ ! "\$BIN_DIR" -ef "\$DIR" ]; then
  "\$XDG_DATA_HOME/$BIN/client/bin/$BIN" "\$@"
else
  CLI_BINPATH="\$DIR/$BIN" "\$DIR/node" "\$DIR/$BIN.js" "\$@"
fi
EOF
chmod +x "$DEST/bin/$BIN"
fi

cat << EOF > "$DEST/bin/$BIN.js"
const path = require('path')
const CLI = require('cli-engine').default
const root = path.join(__dirname, '..')
const cli = new CLI({
  argv: process.argv.slice(1),
  config: {
    root,
    pjson: require(path.join(root, 'package.json')),
    channel: '$CHANNEL',
    version: '$VERSION'
  }
})
cli.run()
EOF
