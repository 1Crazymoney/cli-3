#!/bin/bash

set -x

source ./scripts/main

if [[ $# -ne 4 ]]; then
  echo "USAGE: $0 OS ARCH CHANNEL OUTPUT_DIR"
  exit 1
fi

__os=$1
__arch=$2
__channel=$3
__output="$(mkdir -p "$4" && cd "$4" && pwd)"

# setup workspace
rm -rf "${__output}"
mkdir -p "${__output}/node_modules"
mkdir -p "${__output}/bin"
cp "${__root}/README.md" "${__output}"
cp "${__root}/LICENSE" "${__output}"
cp "${__root}/package.json" "${__output}"

"${__root}/scripts/fetch_node_binary" "${__os}" "${__arch}" "${__output}/bin" &

function yarn {
  # install packages
  yarn install --no-progress --production --no-progress --modules-folder="${__output}/node_modules" &

  # build cli-engine if needed
  if [ ! -f "${__output}/node_modules/cli-engine/lib/cli.js" ]; then
    cd "${__output}/node_modules/cli-engine"
    yarn
    yarn run prepare
  fi
}
yarn &

# create bin runner
if [ "${__os}" == windows ]; then
  cat << EOF > "${__output}/bin/heroku.cmd"
@echo off
set CLI_BINPATH=%~dp0\\heroku.cmd
"%~dp0\\node.exe" "%~dp0\\heroku.js" %*
EOF
else
  cat << EOF > "${__output}/bin/heroku"
#!/usr/bin/env bash
set -e
get_script_dir () {
  SOURCE="\${BASH_SOURCE[0]}"
  # While \$SOURCE is a symlink, resolve it
  while [ -h "\$SOURCE" ]; do
    DIR="\$( cd -P "\$( dirname "\$SOURCE" )" && pwd )"
    SOURCE="\$( readlink "\$SOURCE" )"
    # If \$SOURCE was a relative symlink (so no "/" as prefix, need to resolve it relative to the symlink base directory
    [[ \$SOURCE != /* ]] && SOURCE="\$DIR/\$SOURCE"
  done
  DIR="\$( cd -P "\$( dirname "\$SOURCE" )" && pwd )"
  echo "\$DIR"
}
DIR=\$(get_script_dir)
# normalize home directory
CLI_HOME=\$(cd && pwd)
XDG_DATA_HOME=\${XDG_DATA_HOME:="\$CLI_HOME/.local/share"}
BIN_DIR="\$XDG_DATA_HOME/heroku/client/bin"
if [ -x "\$BIN_DIR/heroku" ] && [ ! "\$BIN_DIR" -ef "\$DIR" ]; then
  "\$XDG_DATA_HOME/heroku/client/bin/heroku" "\$@"
else
  CLI_BINPATH="\$DIR/heroku" "\$DIR/node" "\$DIR/heroku.js" "\$@"
fi
EOF
chmod +x "${__output}/bin/heroku"
fi

cat << EOF > "${__output}/bin/heroku.js"
const path = require('path')
const CLI = require('cli-engine').default
const root = path.join(__dirname, '..')
const cli = new CLI({
  argv: process.argv.slice(1),
  config: {
    root,
    pjson: require(path.join(root, 'package.json')),
    channel: '${__channel}',
    version: '${__version}'
  }
})
cli.run()
EOF

wait
