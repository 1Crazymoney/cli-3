#!/usr/bin/env bash

set +x

echo "$HEROKU_DEB_KEY" | base64 -d | gpg --import

source ./scripts/main

set -x

export OS=linux

# set constants
DEB_VERSION="${VERSION}-1"
workspace_root=$root/tmp/apt

rm -rf "$workspace_root"

function build_arch () {
  ARCH=$1
  # set constants
  if [[ "$ARCH" = "x64" ]]; then
    DEB_ARCH=amd64
  elif [[ "$ARCH" = "arm" ]]; then
    DEB_ARCH=armel
  else
    DEB_ARCH=i386
  fi
  DEB_BASE=heroku_${DEB_VERSION}_$DEB_ARCH
  WORKSPACE="$workspace_root/$DEB_BASE.apt"
  DEB_FILE="$workspace_root/$DEB_BASE.deb"

  # prep workspace
  mkdir -p "$WORKSPACE/DEBIAN"
  mkdir -p "$WORKSPACE/usr/bin"
  mkdir -p "$WORKSPACE/usr/lib"

  # setup base
  ARCH=${ARCH} "${root}/scripts/build_base"
  mv "$root/tmp/builds/$(base)" "$WORKSPACE/usr/lib/heroku"

  # add bin loader scripts
  cat << EOF > "$WORKSPACE/usr/lib/heroku/bin/heroku"
#!/usr/bin/env bash
set -e
get_script_dir () {
  SOURCE="\${BASH_SOURCE[0]}"
  # While \$SOURCE is a symlink, resolve it
  while [ -h "\$SOURCE" ]; do
    DIR="\$( cd -P "\$( dirname "\$SOURCE" )" && pwd )"
    SOURCE="\$( readlink "\$SOURCE" )"
    # If \$SOURCE was a relative symlink (so no "/" as prefix, need to resolve it relative to the symlink base directory
    [[ \$SOURCE != /* ]] && SOURCE="\$DIR/\$SOURCE"
  done
  DIR="\$( cd -P "\$( dirname "\$SOURCE" )" && pwd )"
  echo "\$DIR"
}
DIR=\$(get_script_dir)
CLI_BINPATH=\$DIR/heroku \$DIR/node \$DIR/heroku.js "\$@"
EOF
  chmod +x "$WORKSPACE/usr/lib/heroku/bin/heroku"

  cat << EOF > "$WORKSPACE/usr/lib/heroku/bin/heroku.js"
const path = require('path')
const CLI = require('cli-engine').default
const root = path.join(__dirname, '..')
const cli = new CLI({
  argv: process.argv.slice(1),
  config: {
    root,
    pjson: require(path.join(root, 'package.json')),
    channel: '${CHANNEL}',
    version: '${VERSION}',
    updateDisabled: 'update the CLI with "sudo apt-get upgrade heroku"'
  }
})
cli.run()
EOF

  # add debian config
  sed -e "s/Architecture: ARCHITECTURE/Architecture: $DEB_ARCH/" resources/deb/control | \
  sed -e "s/Version: VERSION/Version: $DEB_VERSION/" \
  > "$WORKSPACE/DEBIAN/control"

  # symlink bin
  ln -s ../lib/heroku/bin/heroku "$WORKSPACE/usr/bin/heroku"

  # reset permissions
  chown -R root "$WORKSPACE"
  chgrp -R root "$WORKSPACE"

  # build deb package
  dpkg --build "$WORKSPACE" "$DEB_FILE"
  rm -rf "$WORKSPACE"
}

ARCHS=(arm x64 x86)
for ARCH in "${ARCHS[@]}"; do
  bg build_arch "$ARCH"
  sleep 1
done
wait_all

# create Package apt file
cd "$workspace_root"
apt-ftparchive packages . > Packages
gzip -c Packages > Packages.gz
bzip2 -k Packages
xz -k Packages

# create Release apt file
cd "$workspace_root"
apt-ftparchive -c "$root/resources/deb/apt-ftparchive.conf" release . > Release
gpg --digest-algo SHA512 --clearsign -u 0F1B0520 -o InRelease Release
gpg --digest-algo SHA512 -abs -u 0F1B0520 -o Release.gpg Release

# ship to s3
REMOTE_PATH=/branches/$(channel)/apt
REMOTE_ROOT=s3://${S3_BUCKET}${REMOTE_PATH}
bg s3uploadDayCache "$workspace_root/heroku_${DEB_VERSION}_armel.deb" "$REMOTE_ROOT/heroku_${DEB_VERSION}_armel.deb"
bg s3uploadDayCache "$workspace_root/heroku_${DEB_VERSION}_amd64.deb" "$REMOTE_ROOT/heroku_${DEB_VERSION}_amd64.deb"
bg s3uploadDayCache "$workspace_root/heroku_${DEB_VERSION}_i386.deb" "$REMOTE_ROOT/heroku_${DEB_VERSION}_i386.deb"
bg s3uploadHourCache --content-type text/plain "$workspace_root/Release" "$REMOTE_ROOT/Release"
bg s3uploadHourCache --content-type text/plain "$workspace_root/InRelease" "$REMOTE_ROOT/InRelease"
bg s3uploadHourCache --content-type text/plain "$workspace_root/Release.gpg" "$REMOTE_ROOT/Release.gpg"
bg s3uploadHourCache --content-type text/plain "$workspace_root/Packages" "$REMOTE_ROOT/Packages"
bg s3uploadHourCache "$workspace_root/Packages.bz2" "$REMOTE_ROOT/Packages.bz2"
bg s3uploadHourCache "$workspace_root/Packages.gz" "$REMOTE_ROOT/Packages.gz"
bg s3uploadHourCache "$workspace_root/Packages.xz" "$REMOTE_ROOT/Packages.xz"
wait_all

# update install-ubuntu.sh if changed
curl -fsS https://heroku-cli-assets.s3.amazonaws.com/install-ubuntu.sh > "$root/tmp/install-ubuntu.sh"
if ! cmp -s "$root/tmp/install-ubuntu.sh" "$root/resources/deb/install-ubuntu.sh"; then
  cat "$root/tmp/install-ubuntu.sh"
  cat "$root/resources/deb/install-ubuntu.sh"
  aws s3 cp --content-type text/plain --cache-control max-age=3600 "$root/resources/deb/install-ubuntu.sh" "s3://$S3_BUCKET/install-ubuntu.sh"
  aws cloudfront create-invalidation --distribution-id EHF9FOCUJYVZ --paths "/install-ubuntu.sh"
fi

# invalidate CDN
aws cloudfront create-invalidation --distribution-id EHF9FOCUJYVZ --paths "$REMOTE_PATH/*"
