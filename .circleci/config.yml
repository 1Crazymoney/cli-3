---
defaults: &defaults
  working_directory: /cli
  docker:
    - image: node:8.4
      environment: &env
        NPM_CONFIG_REGISTRY: https://cli-npm.heroku.com

version: 2
executorType: docker
jobs:
  test:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-test-{{ checksum "yarn.lock" }}
            - v3-test
      - run: ./scripts/prep
      - run: {command: "./scripts/test/lint", when: always}
      - run: {command: "npx flow check", when: always}
      - run: {command: "npx jest", when: always}
      - run: {command: "bash <(curl -s https://codecov.io/bash)"}
      - run: {command: "./scripts/test/smoke", when: always}
      - save_cache:
          key: v3-test-{{ checksum "yarn.lock" }}
          paths:
            - /usr/local/share/.cache/yarn
            - /cli/node_modules
  build_base:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - v0-build-base-yarn-{{ checksum "yarn.lock" }}
            - v0-build-base-yarn
      - run: ./scripts/build/base
      - persist_to_workspace:
          root: tmp/base
          paths: [ . ]
      - save_cache:
          key: v0-build-base-yarn-{{ checksum "yarn.lock" }}
          paths: [/usr/local/share/.cache/yarn]
  build_darwin_x64:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: {keys: [node-v8.4.0-darwin-x64]}
      - attach_workspace: {at: tmp/base}
      - run: ./scripts/build/workspace
      - run: ./scripts/build/tarballs
      - persist_to_workspace: &dist
          root: dist
          paths: [ . ]
      - save_cache: &node_cache_save
          key: node-v8.4.0-darwin-x64
          paths: [/cli/tmp/cache/node]
  build_linux_x64:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: {keys: [node-v8.4.0-linux-x64]}
      - attach_workspace: {at: tmp/base}
      - run: ./scripts/build/workspace
      - run: ./scripts/build/tarballs
      - run: ./scripts/build/debian
      - persist_to_workspace: *dist
      - save_cache:
          <<: *node_cache_save
          key: node-v8.4.0-linux-x64
  build_linux_x86:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: {keys: [node-v8.4.0-linux-x86]}
      - attach_workspace: {at: tmp/base}
      - run: ./scripts/build/workspace
      - run: ./scripts/build/tarballs
      - run: ./scripts/build/debian
      - persist_to_workspace: *dist
      - save_cache:
          <<: *node_cache_save
          key: node-v8.4.0-linux-x86
  build_linux_arm:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: {keys: [node-v8.4.0-linux-arm]}
      - attach_workspace: {at: tmp/base}
      - run: ./scripts/build/workspace
      - run: ./scripts/build/tarballs
      - run: ./scripts/build/debian
      - persist_to_workspace: *dist
      - save_cache:
          <<: *node_cache_save
          key: node-v8.4.0-linux-arm
          paths:
            - linux-arm
            - heroku-cli-linux-arm.tar.gz
            - heroku-cli-linux-arm.tar.xz
  build_windows_x64:
    <<: *defaults
    docker: &windows_docker
      - image: dickeyxxx/cli-engine-docker-nsis:v3.0.2
        environment: *env
    steps:
      - checkout
      - restore_cache: {keys: [node-v8.4.0-windows-x64]}
      - attach_workspace: {at: tmp/base}
      - run: ./scripts/build/workspace
      - run: ./scripts/build/tarballs
      - run: ./scripts/build/windows
      - persist_to_workspace: *dist
      - save_cache:
          <<: *node_cache_save
          key: node-v8.4.0-windows-x64
  build_windows_x86:
    <<: *defaults
    docker: *windows_docker
    steps:
      - checkout
      - restore_cache: {keys: [node-v8.4.0-windows-x86]}
      - attach_workspace: {at: tmp/base}
      - run: ./scripts/build/workspace
      - run: ./scripts/build/tarballs
      - run: ./scripts/build/windows
      - persist_to_workspace: *dist
      - save_cache:
          <<: *node_cache_save
          key: node-v8.4.0-windows-x86
  release:
    <<: *defaults
    docker:
      - image: dickeyxxx/cli-engine-docker:v3.0.6
        environment: *env
    steps:
      - add_ssh_keys
      - checkout
      - attach_workspace: {at: dist}
      - run: {command: "ls dist && ls dist/apt", when: always}
      - run: {command: "./scripts/release/_github_setup", when: always}
      - run: {command: "./scripts/release/_upload_dist", when: always}
      - run: {command: "./scripts/release/_upload_debian", when: always}
      - run: {command: "./scripts/release/_homebrew", when: always}
      - run: {command: "./scripts/release/_macos_installer_trigger", when: always}
      - run: {command: "./scripts/release/_invalidate_cdn", when: always}
  # dev_center_docs:
  #   docker: *windows_docker
  #   steps:
  #     - type: checkout
  #     - run: ./scripts/release/dev_center_docs
  #     - store_artifacts:
  #         path: /tmp/heroku-cli-commands.md
  #     - run: |
  #         if [ "$CIRCLE_TAG" != "" ]; then
  #           devcenter push /tmp/heroku-cli-commands.md --trace
  #         fi
workflows:
  version: 2
  heroku_cli:
    jobs:
      - test:
          filters: &all_pushes
            tags: &version_tags
              only: /^v.*/
      - build_base:
          filters: *all_pushes
      - build_darwin_x64: &release
          requires:
            - build_base
          filters:
            tags: *version_tags
            branches:
              only:
                - master
                - dev
      - build_linux_x64: *release
      - build_linux_x86: *release
      - build_linux_arm: *release
      - build_windows_x64: *release
      - build_windows_x86: *release
      - release:
          <<: *release
          requires:
            - test
            - build_darwin_x64
            - build_linux_x64
            - build_linux_x86
            - build_linux_arm
            - build_windows_x64
            - build_windows_x86
      # skip devcenter for now
      # - dev_center_docs:
      #     requires:
      #       - test
